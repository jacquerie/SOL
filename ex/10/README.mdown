# Esercitazione 10 #

Questa esercitazione è relativa alle system call per la gestione dei processi.
Pe eseguire un comando usare le funzioni della famiglia `exec()` e
(eventualmente) una `fork()`.

## Esercizio 0: sulle volpi ##

Cosa stampa il seguente `main()`?
```c
int main (void) {
	printf("The quick brown fox jumped over ");
	fork();
	printf("the lazy dogs\n");

	return 0;
}
```

E questo?
```c
int main (void) {
	printf("The quick brown fox jumped over ");
	execl("/bin/echo", "echo", "the", "lazy", "dogs.", NULL);

	return 0;
}
```

Perché?

## Esercizio 1: n-esimo nipote ##

Scrivere un programma C che prenda un numero N > 1 dalla riga di comando e crei
N discendenti come segue: prima forka un figlio, il quale a sua volta forka un
altro figlio e così via fino a ottenere N processi in tutto. Ogni processo
appena attivato stampa il proprio PID, il PID del padre e poi termina. In che
ordine avvengono le stampe?

Modificare il programma in modo che ogni processo, prima di terminare, attenda
la terminazione del proprio figlio e stampi, oltre al proprio PID e al PPID, il
PID del figlio e il tipo di terminazione avvenuta (exited, killed, eccetera) ed
eventualmente l'exit status o il segnale ricevuto. Cosa viene stampato?

Infine modificare il programma in modo che ogni figlio, prima di uscire,
attenda anche la terminazione del proprio padre. Cosa accade?

## Esercizio 2: `dummyshell` ##

Realizzare una shell rudimentale che legge un comando con eventuali parametri
da `stdin` e ne invoca l'esecuzione utilizzando una funzione della famiglia
`exec()`. La shell deve terminare se viene digitato il comando `exit` e deve
fornire nel prompt il numero progressivo del comando che stiamo per eseguire
(dall'attivazione) e lo stato con cui è terminato il comando precedente. Ad
esempio:
```
$ dummyshell
Welcome in dummyshell!!
1@dummy:stato= 0$ llls pippo
Nella execvp: No such file or directory 
2@dummy:stato=29$ ls pippo
ls: pippo: No such file or directory
2@dummy:stato= 1$ ls pippo.c
pippo.c
4@dummy:stato= 0$ exit
Leaving dummyshell ...
```

Il formato dei comandi è molto semplice e non prevede metacaratteri o forme di
redirezione.

_Estensione:_ dare più informazioni sulla terminazione (exited, signaled,
eccetera).

## Esercizio 3: esecuzione in background ##

Scrivere un programma C che, appena attivato, va immediatamente in background, attende per 2 secondi (con `sleep()`) e poi stampa il proprio PID e il PID del padre.

_Suggerimento:_ sperimentare cosa succede se si effettua una nuova `fork()` nel
processo figlio lasciando attivo solo il processo nipote.

