# Esercitazione 9 #

Questa esercitazione tratta due strumenti per valutare le caratteristiche dei
vostri programmi.

## Esercizio 1: valutare il test coverage con `gcov` ##

Utilizzare `gcov` per effettuare una valutazione del test coverage dei
programmi di test che avete sviluppato per la soluzione di uno degli esercizi
precedenti. In altre parole, dovete stabilire quanta parte del codice che avete
scritto viene effettivamente eseguita e quindi testata.

Per utilizzare `gcov`:

* compilare con opzione
```
-fprofile-arcs -ftest-coverage
```
e linkare con `lgcov` o `-fprofile-arcs`
* eseguire
* invocare `gcov` sul file sorgente

Ad esempio:
```
$ gcc -fprofile-arcs -ftest-coverage tmp.c
$ ./a.out
$ gcov tmp.c
90.00% of 10 source lines executed in file tmp.c
 Creating tmp.c.gcov.
```

Dopo aver fatto questo file `tmp.c.gov` contiene il file sorgente `tmp.c` annotato con
l'output di `gcov`. Ad esempio:
```
-:    0:Source:tmp.c
-:    0:Graph:tmp.gcno
-:    0:Data:tmp.gcda
-:    0:Runs:1
-:    0:Programs:1
-:    1:#include <stdio.h>
-:    2:
-:    3:int main (void)
1:    4:{
1:    5:  int i, total;
-:    6:
1:    7:  total = 0;
-:    8:
11:    9:  for (i = 0; i < 10; i++)
10:   10:    total += i;
-:   11:
1:   12:  if (total != 45)
#####:   13:    printf ("Failure\n");
-:   14:  else
1:   15:    printf ("Success\n");
1:   16:  return 0;
-:   17:}
```

dove i numeri a sinistra indicano il numero di esecuzione effettuate per quella
linea e le gratelle '`#####`' le linee non eseguite.

## Esercizio 2: profilare con `gprof` ##

Utilizzare `gprof` per effettuare una valutazione del tempo impiegato in ogni
invocazione di funzione nei programmi di test che avete sviluppato per la
soluzione di uno degli esercizi precedenti.
