# Esercitazione 5 #

Dove si sperimentano alcuni comandi di base Bash.

## Esercizio -1: interazione utente di base##

Seguire i lucidi [Bash (parte
1)](https://elearning.di.unipi.it/moodle/pluginfile.php/1315/mod_page/content/3/c009asolab_bash1.0.pdf)
e provare i comandi negli esempi mostrati a lezione. Cercare di diminuire i
tempi di battitura dei comandi sfruttando il meccanismo di history, il
comletamento (TAB) e l'editing di linea.

## Esercizio 0: `man`, `cat`, `grep`, `sort` ##

Utilizzare `cat` per creare un file di nome `lyrics` che contiene la canzone del non complesanno di Alice nel Paese delle Meraviglie:
```
Statics prove, prove that you've one birthday,
one birthday ev'ry year.
But there are three hundred and sixty four
unbirthdays.
That is why we're gathered here to cheer.
A very merry unbirthday to you, to you.
A very merry unbirthday to you,
It's great to drink to someone and I guess that you will do.
A very merry unbirthday to you
```
con `grep` e `sort` per selezionare tutte le line che contengono esattamente la
parola `one` (non come sottostringa di una parola data), ordinarle
lessicograficamente e farle stampare su `stdout` (usare `sort`).

Utilizzare le opzioni di `grep` (vedi `man grep`) per stampare il numero di
linea in cui è stata trovata un'occorrenza come in:
```
1:Statistics prove, prove that you've one birthday
2:one birthday ev'ry year.
```
e poi sempre con la `grep` stampare tutte le linee che non contengono la parola
`merry` in ordine lessicografico case-unsensitive, cioè:
```
But there are three hundred and sixty four
It's great to drink to someone and I guess that you will do.
one birthday ev'ry year.
Statistics prove, prove that you've one birthday,
That is why we're gathered here to cheer.
unbirthdays.
```
### Approfondimenti: ###

* Usare `fgrep` invece di `grep` e confrontare il tempo impiegato dai due comandi in modalità utente e kernel usando `time`.
* Controllare le chiamate di sistema effettuate dai vari comandi con `strace`.

## Esercizio 1: trasformismo ##

Trasformare il file `lyrics` nell'esercizio precedente nel file `LYRICS` in cui
tutte le lettere maiuscole sono state trasformate in lettere maiuscole.

## Esercizio 2: trovare i file non acceduti negli ultimi 30 giorni ##

Scrivere una pipeline di comandi che lista tutti i file che non sono stati
acceduti negli ultimi 30 giorni nella gerarchia di directory radicata nella
directory corrente (_suggerimento:_ usare `find`).

## Esercizio 3: prettyPath ##

Stampare su `stdout` tutte le directory in `$PATH` separate da newline.

## Esercizio 4: personalizzare il prompt ##

Personalizzare il prompt della shell in modo da stampare utente, tipi di shell,
working directory, eccetera (_suggerimento:_ `man bash`, cercare `PROMPTING`).

## Esercizio 5: aliasing ##

Definire i seguenti alias per la propria shell:

* `cp` come alias di `cp -i`
* `mv` come alias di `mv -i`
* `rm` come alias di `rm -i`
* `cercaEeimuovi` che effettua la rimozione di tutti i file che terminano per '`~`' nella gerarchia di directory radicata nella directory corrente
* `bye` che effetta l'uscita dalla shell

Fare in modo che gli alias vengano registrati automaticamente ogni volta che una shell viene attivata (_suggiermento:_ `man bash`, cercare `bashrc`).

## Esercizio 6: ??? ##

Sapete interpretare il risultato del seguente comando?
```
ls -l /proc/$$/fd
```
## Esercizio 7: magic files and numbers

Utilizzare `file` per stabilire il tipo dei file che si trovano nella vostra
home. `file` lavora controllando i magic number in `/usr/share/file/magic`,
esplorando questo file riuscite a trovare il tipo dei file visitati?

### Approfondimenti: ###

Come si potrebbe aggiungere un nuovo tipo riconoscibile da `file`?
